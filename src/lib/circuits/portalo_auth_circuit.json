{
  "noir_version": "0.32.0+c679f01a19b02ad2ac2287c8e699b46887f7872c",
  "hash": 18221937056552327742,
  "abi": {
    "parameters": [
      {
        "name": "hashed_signature",
        "type": {
          "kind": "array",
          "length": 32,
          "type": { "kind": "integer", "sign": "unsigned", "width": 8 }
        },
        "visibility": "private"
      },
      {
        "name": "profileId",
        "type": {
          "kind": "array",
          "length": 8,
          "type": { "kind": "integer", "sign": "unsigned", "width": 8 }
        },
        "visibility": "public"
      },
      {
        "name": "nonce",
        "type": {
          "kind": "array",
          "length": 8,
          "type": { "kind": "integer", "sign": "unsigned", "width": 8 }
        },
        "visibility": "public"
      },
      {
        "name": "hashed_encryption_key",
        "type": {
          "kind": "array",
          "length": 32,
          "type": { "kind": "integer", "sign": "unsigned", "width": 8 }
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {}
  },
  "bytecode": "",
  "debug_symbols": "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",
  "file_map": {
    "47": {
      "source": "use crate::append::Append;\n\nimpl<T> [T] {\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the \n    /// original unmodified slice. \n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements \n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and \n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    // Append each element of the `other` slice to the end of `self`.\n    // This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::unsafe::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T where T: Append {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n",
      "path": "std/slice.nr"
    },
    "53": {
      "source": "use dep::std::ecdsa_secp256k1::verify_signature;\n\nfn main(\n  hashed_signature: [u8; 32],\n  profileId: pub [u8; 8],\n  nonce: pub [u8; 8], \n  hashed_encryption_key: pub [u8; 32]\n) {\n    let secret: [u8; 48] = hashed_signature.as_slice().append(profileId.as_slice()).append(nonce.as_slice()).as_array();\n\n    let hashed_secret = std::hash::sha256(secret);\n    assert(hashed_secret == hashed_encryption_key);\n}\n\n#[test]\nfn test_main() {\n    let signature = std::hash::sha256(\"0x1f5947fca12d9ab31bd573c83d40ce5e5d89f3d99e32ab5f4daccd0940aa5f114ec1917552ba1f66456bf6d0066ac0d6cd5b926bf6e1a16433eac77d1dead43a1b\".as_bytes()); \n    let profile_id: [u8; 8] = \"12345678\".as_bytes();\n    let nonce: [u8; 8] = \"12345678\".as_bytes();\n    \n    println(signature);\n    println(profile_id);\n    println(nonce);\n\n    let signature_as_slice = signature.as_slice();\n    let profile_id_as_slice = profile_id.as_slice();\n    let nonce_as_slice = nonce.as_slice();\n\n    let secret:[u8; 48] = signature_as_slice.append(profile_id_as_slice).append(nonce_as_slice).as_array();\n\n    let hashed_encryption_key = std::hash::sha256(secret);\n\n    println(hashed_encryption_key);\n\n    main(signature, profile_id, nonce, hashed_encryption_key);\n}",
      "path": "/home/pablo/Source/labs/eth-arg-hackathon-24/portalo_auth_circuit/src/main.nr"
    }
  },
  "names": ["main"]
}
